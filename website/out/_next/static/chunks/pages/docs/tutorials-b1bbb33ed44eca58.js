(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[295],{2190:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/tutorials",function(){return t(6035)}])},6035:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return l}});var o=t(5893),s=t(2191),a=t(1664),i=t.n(a),r=t(7294),c=t(4282);let d=[{id:"react",title:"Integrating with React",description:"Learn how to add CancelReady to a React application",difficulty:"Beginner",timeEstimate:"10 minutes",content:'\n      <h2>Integrating CancelReady with React</h2>\n      <p>This tutorial will guide you through the process of adding CancelReady to a React application.</p>\n      \n      <h3>Prerequisites</h3>\n      <ul>\n        <li>A React application (Create React App or any other React setup)</li>\n        <li>A CancelReady account with a vendor key</li>\n      </ul>\n      \n      <h3>Step 1: Install Dependencies</h3>\n      <p>No additional dependencies are required for basic integration.</p>\n      \n      <h3>Step 2: Create a CancelReady Component</h3>\n      <div class="code-block">\n        <pre>\n// CancelButton.jsx\nimport { useEffect, useRef } from \'react\';\n\nconst CancelButton = ({ userId, vendorKey, customOptions = {} }) => {\n  const cancelButtonRef = useRef(null);\n  \n  useEffect(() => {\n    // Load the CancelReady script\n    const script = document.createElement(\'script\');\n    script.src = \'https://cancelready.com/cancelkit.min.js\';\n    script.async = true;\n    script.onload = () => {\n      // Initialize CancelReady once the script is loaded\n      if (window.CancelReady && cancelButtonRef.current) {\n        window.CancelReady.init({\n          vendorKey,\n          userId,\n          ...customOptions\n        });\n      }\n    };\n    document.body.appendChild(script);\n    \n    // Cleanup function\n    return () => {\n      if (window.CancelReady) {\n        window.CancelReady.destroy();\n      }\n      document.body.removeChild(script);\n    };\n  }, [userId, vendorKey, customOptions]);\n  \n  return <div id="ck-target" ref={cancelButtonRef}></div>;\n};\n\nexport default CancelButton;\n        </pre>\n      </div>\n      \n      <h3>Step 3: User ID Mapping (Critical)</h3>\n      <div class="alert-block">\n        <p><strong>Important:</strong> The <code>userId</code> you provide to CancelReady must match exactly how you\'ve stored the user identifier in your payment processor when creating the subscription.</p>\n      </div>\n      \n      <h4>For Stripe Users:</h4>\n      <div class="code-block">\n        <pre>\n// When creating a subscription in Stripe\nconst subscription = await stripe.subscriptions.create({\n  customer: stripeCustomerId,\n  items: [{ price: \'price_123\' }],\n  metadata: {\n    userId: user.id  // MUST MATCH the userId you pass to CancelReady\n  }\n});\n        </pre>\n      </div>\n      \n      <h4>For Paddle Users:</h4>\n      <div class="code-block">\n        <pre>\n// When creating a subscription in Paddle\nconst subscription = await paddle.createSubscription({\n  planId: \'plan_123\',\n  customerId: paddleCustomerId,\n  passthrough: JSON.stringify({\n    userId: user.id  // MUST MATCH the userId you pass to CancelReady\n  })\n});\n        </pre>\n      </div>\n      \n      <h3>Step 4: Use the Component in Your App</h3>\n      <div class="code-block">\n        <pre>\n// YourAccountPage.jsx\nimport CancelButton from \'./CancelButton\';\n\nconst AccountPage = ({ user }) => {\n  return (\n    <div className="account-page">\n      <h1>Your Account</h1>\n      \n      {/* Other account settings */}\n      \n      <div className="subscription-section">\n        <h2>Subscription</h2>\n        <p>Current Plan: {user.plan}</p>\n        <p>Billing Cycle: {user.billingCycle}</p>\n        \n        {/* Add the CancelReady button */}\n        <CancelButton \n          userId={user.id}  // MUST match the ID stored in payment processor\n          vendorKey="your_vendor_key"\n          customOptions={{\n            buttonText: "Cancel my subscription",\n            buttonColor: "#ef4444",\n            testMode: process.env.NODE_ENV !== \'production\'\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default AccountPage;\n        </pre>\n      </div>\n      \n      <h3>Step 4: Handle Cancellation Events (Optional)</h3>\n      <p>You can listen for cancellation events to perform additional actions:</p>\n      <div class="code-block">\n        <pre>\n// Enhanced CancelButton.jsx with event handling\nimport { useEffect, useRef } from \'react\';\n\nconst CancelButton = ({ userId, vendorKey, onSuccess, onError, customOptions = {} }) => {\n  const cancelButtonRef = useRef(null);\n  \n  useEffect(() => {\n    // Load the CancelReady script\n    const script = document.createElement(\'script\');\n    script.src = \'https://cancelready.com/cancelkit.min.js\';\n    script.async = true;\n    script.onload = () => {\n      // Initialize CancelReady once the script is loaded\n      if (window.CancelReady && cancelButtonRef.current) {\n        window.CancelReady.init({\n          vendorKey,\n          userId,\n          ...customOptions\n        });\n        \n        // Set up event listeners\n        if (onSuccess) {\n          window.CancelReady.on(\'cancel:success\', onSuccess);\n        }\n        \n        if (onError) {\n          window.CancelReady.on(\'cancel:error\', onError);\n        }\n      }\n    };\n    document.body.appendChild(script);\n    \n    // Cleanup function\n    return () => {\n      if (window.CancelReady) {\n        window.CancelReady.destroy();\n      }\n      document.body.removeChild(script);\n    };\n  }, [userId, vendorKey, customOptions, onSuccess, onError]);\n  \n  return <div id="ck-target" ref={cancelButtonRef}></div>;\n};\n\nexport default CancelButton;\n        </pre>\n      </div>\n      \n      <h3>Testing Your Integration</h3>\n      <p>To test your integration:</p>\n      <ol>\n        <li>Set <code>testMode: true</code> in your customOptions</li>\n        <li>Render the CancelButton component</li>\n        <li>Click the "Cancel subscription" button</li>\n        <li>Verify that the cancellation modal appears</li>\n        <li>Complete the cancellation flow</li>\n        <li>Check your CancelReady dashboard to confirm the test cancellation was recorded</li>\n      </ol>\n    '},{id:"nextjs",title:"Adding CancelReady to Next.js",description:"Implement CancelReady in a Next.js application",difficulty:"Beginner",timeEstimate:"15 minutes",content:'\n      <h2>Adding CancelReady to Next.js</h2>\n      <p>This tutorial shows how to integrate CancelReady with a Next.js application.</p>\n      \n      <h3>Prerequisites</h3>\n      <ul>\n        <li>A Next.js application</li>\n        <li>A CancelReady account with a vendor key</li>\n      </ul>\n      \n      <h3>Step 1: Create a Script Loader Component</h3>\n      <div class="code-block">\n        <pre>\n// components/CancelReadyScript.js\nimport { useEffect } from \'react\';\nimport Script from \'next/script\';\n\nexport default function CancelReadyScript({ vendorKey, userId, options = {} }) {\n  useEffect(() => {\n    // Initialize CancelReady when the component mounts and the script is loaded\n    if (window.CancelReady) {\n      window.CancelReady.init({\n        vendorKey,\n        userId,\n        ...options\n      });\n    }\n    \n    // Clean up when the component unmounts\n    return () => {\n      if (window.CancelReady) {\n        window.CancelReady.destroy();\n      }\n    };\n  }, [vendorKey, userId, options]);\n\n  return (\n    <Script\n      src="https://cancelready.com/cancelkit.min.js"\n      strategy="afterInteractive"\n      onLoad={() => {\n        if (window.CancelReady) {\n          window.CancelReady.init({\n            vendorKey,\n            userId,\n            ...options\n          });\n        }\n      }}\n    />\n  );\n}\n        </pre>\n      </div>\n      \n      <h3>Step 2: Create a Cancel Button Component</h3>\n      <div class="code-block">\n        <pre>\n// components/CancelButton.js\nimport { useEffect } from \'react\';\nimport CancelReadyScript from \'./CancelReadyScript\';\n\nexport default function CancelButton({ userId, vendorKey, options = {} }) {\n  return (\n    <>\n      <CancelReadyScript \n        vendorKey={vendorKey}\n        userId={userId}\n        options={options}\n      />\n      <div id="ck-target"></div>\n    </>\n  );\n}\n        </pre>\n      </div>\n      \n      <h3>Step 3: User ID Mapping (Critical)</h3>\n      <div class="alert-block">\n        <p><strong>Important:</strong> The <code>userId</code> you provide to CancelReady must match exactly how you\'ve stored the user identifier in your payment processor when creating the subscription.</p>\n      </div>\n      \n      <h4>For Stripe Users:</h4>\n      <div class="code-block">\n        <pre>\n// When creating a subscription in Stripe\nconst subscription = await stripe.subscriptions.create({\n  customer: stripeCustomerId,\n  items: [{ price: \'price_123\' }],\n  metadata: {\n    userId: session.user.id  // MUST MATCH the userId you pass to CancelReady\n  }\n});\n        </pre>\n      </div>\n      \n      <h4>For Paddle Users:</h4>\n      <div class="code-block">\n        <pre>\n// When creating a subscription in Paddle\nconst subscription = await paddle.createSubscription({\n  planId: \'plan_123\',\n  customerId: paddleCustomerId,\n  passthrough: JSON.stringify({\n    userId: session.user.id  // MUST MATCH the userId you pass to CancelReady\n  })\n});\n        </pre>\n      </div>\n      \n      <h3>Step 4: Use the Component in Your Pages</h3>\n      <div class="code-block">\n        <pre>\n// pages/account.js\nimport { useSession } from \'next-auth/react\';\nimport CancelButton from \'../components/CancelButton\';\n\nexport default function AccountPage() {\n  const { data: session } = useSession();\n  \n  if (!session) {\n    return <p>Please sign in to view your account.</p>;\n  }\n  \n  return (\n    <div className="container mx-auto py-8">\n      <h1 className="text-2xl font-bold mb-6">Your Account</h1>\n      \n      <div className="bg-white shadow rounded-lg p-6">\n        <h2 className="text-xl font-semibold mb-4">Subscription Details</h2>\n        <p className="mb-2">Plan: Premium</p>\n        <p className="mb-4">Next billing date: June 25, 2025</p>\n        \n        <CancelButton \n          userId={session.user.id}  // MUST match the ID stored in payment processor\n          vendorKey={process.env.NEXT_PUBLIC_CANCELKIT_VENDOR_KEY}\n          options={{\n            buttonText: "Cancel my subscription",\n            buttonColor: "#ef4444",\n            testMode: process.env.NODE_ENV !== \'production\'\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n        </pre>\n      </div>\n      \n      <h3>Step 4: Environment Variables</h3>\n      <p>Create a <code>.env.local</code> file in your project root:</p>\n      <div class="code-block">\n        <pre>\n# .env.local\nNEXT_PUBLIC_CANCELREADY_VENDOR_KEY=your_vendor_key\n        </pre>\n      </div>\n      \n      <h3>Testing Your Integration</h3>\n      <p>To test your integration:</p>\n      <ol>\n        <li>Run your Next.js app in development mode</li>\n        <li>Navigate to your account page</li>\n        <li>Verify that the "Cancel subscription" button appears</li>\n        <li>Click the button and complete the cancellation flow</li>\n        <li>Check your CancelReady dashboard to confirm the test cancellation was recorded</li>\n      </ol>\n    '},{id:"wordpress",title:"CancelReady for WordPress",description:"Add CancelReady to a WordPress site with WooCommerce",difficulty:"Intermediate",timeEstimate:"20 minutes",content:"\n      <h2>Integrating CancelReady with WordPress and WooCommerce</h2>\n      <p>This tutorial will show you how to add CancelReady to a WordPress site with WooCommerce subscriptions.</p>\n      \n      <h3>Prerequisites</h3>\n      <ul>\n        <li>A WordPress website</li>\n        <li>WooCommerce and WooCommerce Subscriptions plugins installed and activated</li>\n        <li>A CancelReady account with a vendor key</li>\n      </ul>\n      \n      <h3>Step 1: Create a Simple Plugin</h3>\n      <p>Create a new folder in your <code>wp-content/plugins</code> directory called <code>cancelready-integration</code>.</p>\n      <p>Inside this folder, create a file named <code>cancelready-integration.php</code>:</p>\n      <div class=\"code-block\">\n        <pre>\n<?php\n/**\n * Plugin Name: CancelReady Integration\n * Description: Integrates CancelReady with WooCommerce Subscriptions\n * Version: 1.0.0\n * Author: Your Name\n */\n\n// Exit if accessed directly\nif (!defined('ABSPATH')) {\n    exit;\n}\n\n// Enqueue CancelReady script\nfunction cancelready_enqueue_scripts() {\n    // Only enqueue on the My Account page\n    if (is_account_page()) {\n        wp_enqueue_script('cancelready', 'https://cancelready.com/cancelkit.min.js', array(), '1.0.0', true);\n        \n        // Add initialization script\n        wp_add_inline_script('cancelready', '\n            document.addEventListener(\"DOMContentLoaded\", function() {\n                if (typeof CancelReady !== \"undefined\" && document.getElementById(\"ck-target\")) {\n                    CancelReady.init({\n                        vendorKey: \"' . esc_js(get_option('cancelready_vendor_key')) . '\",\n                        userId: \"' . esc_js(get_current_user_id()) . '\", // WordPress user ID must match payment processor\n                        buttonText: \"Cancel subscription\",\n                        buttonColor: \"#96588a\", // WooCommerce purple\n                        testMode: ' . (defined('WP_DEBUG') && WP_DEBUG ? 'true' : 'false') . '\n                    });\n                }\n            });\n        ');\n    }\n}\nadd_action('wp_enqueue_scripts', 'cancelready_enqueue_scripts');\n\n// Add settings page\nfunction cancelready_add_settings_page() {\n    add_submenu_page(\n        'woocommerce',\n        'CancelReady Settings',\n        'CancelReady',\n        'manage_options',\n        'cancelready-settings',\n        'cancelready_settings_page'\n    );\n}\nadd_action('admin_menu', 'cancelready_add_settings_page');\n\n// Settings page content\nfunction cancelready_settings_page() {\n    // Save settings\n    if (isset($_POST['cancelready_vendor_key'])) {\n        update_option('cancelready_vendor_key', sanitize_text_field($_POST['cancelready_vendor_key']));\n        echo '<div class=\"notice notice-success\"><p>Settings saved.</p></div>';\n    }\n    \n    $vendor_key = get_option('cancelready_vendor_key', '');\n    ?>\n    <div class=\"wrap\">\n        <h1>CancelReady Settings</h1>\n        <form method=\"post\">\n            <table class=\"form-table\">\n                <tr>\n                    <th scope=\"row\">Vendor Key</th>\n                    <td>\n                        <input type=\"text\" name=\"cancelready_vendor_key\" value=\"<?php echo esc_attr($vendor_key); ?>\" class=\"regular-text\">\n                        <p class=\"description\">Enter your CancelReady vendor key from your dashboard.</p>\n                    </td>\n                </tr>\n            </table>\n            <?php submit_button(); ?>\n        </form>\n    </div>\n    <?php\n}\n\n// Add cancel button to My Subscriptions table\nfunction cancelready_add_cancel_button($actions, $subscription) {\n    // Only add the button if the subscription is active\n    if ($subscription->get_status() === 'active') {\n        echo '<div id=\"ck-target\" data-subscription-id=\"' . esc_attr($subscription->get_id()) . '\"></div>';\n    }\n    \n    return $actions;\n}\nadd_filter('woocommerce_my_account_my_subscriptions_actions', 'cancelready_add_cancel_button', 10, 2);\n        </pre>\n      </div>\n      \n      <h3>Step 2: Activate the Plugin</h3>\n      <p>Go to your WordPress admin dashboard and activate the \"CancelReady Integration\" plugin.</p>\n      \n      <h3>Step 3: User ID Mapping (Critical)</h3>\n      <div class=\"alert-block\">\n        <p><strong>Important:</strong> For successful cancellations, you must ensure that the WordPress user ID matches the identifier stored in your payment processor.</p>\n      </div>\n      \n      <h4>For WooCommerce Subscriptions with Stripe:</h4>\n      <div class=\"code-block\">\n        <pre>\n// Add this to your functions.php or a custom plugin\nadd_filter('woocommerce_stripe_subscription_metadata', 'add_user_id_to_stripe_metadata', 10, 2);\n\nfunction add_user_id_to_stripe_metadata($metadata, $order) {\n    // Add WordPress user ID to Stripe metadata\n    $user_id = $order->get_user_id();\n    if ($user_id) {\n        $metadata['userId'] = $user_id; // MUST match the userId used in CancelReady\n    }\n    return $metadata;\n}\n        </pre>\n      </div>\n      \n      <h4>For WooCommerce Subscriptions with Paddle:</h4>\n      <div class=\"code-block\">\n        <pre>\n// Add this to your functions.php or a custom plugin\nadd_filter('woocommerce_paddle_subscription_params', 'add_user_id_to_paddle_passthrough', 10, 2);\n\nfunction add_user_id_to_paddle_passthrough($params, $order) {\n    // Add WordPress user ID to Paddle passthrough\n    $user_id = $order->get_user_id();\n    if ($user_id) {\n        $passthrough = isset($params['passthrough']) ? json_decode($params['passthrough'], true) : [];\n        $passthrough['userId'] = $user_id; // MUST match the userId used in CancelReady\n        $params['passthrough'] = json_encode($passthrough);\n    }\n    return $params;\n}\n        </pre>\n      </div>\n      \n      <h3>Step 4: Configure the Plugin</h3>\n      <ol>\n        <li>Navigate to WooCommerce > CancelReady in your WordPress admin menu</li>\n        <li>Enter your CancelReady vendor key</li>\n        <li>Click \"Save Changes\"</li>\n      </ol>\n      \n      <h3>Step 4: Test the Integration</h3>\n      <ol>\n        <li>Log in to your WordPress site as a customer with an active subscription</li>\n        <li>Go to My Account > Subscriptions</li>\n        <li>Verify that the \"Cancel subscription\" button appears next to each active subscription</li>\n        <li>Test the cancellation flow</li>\n        <li>Check your CancelReady dashboard to confirm the test cancellation was recorded</li>\n      </ol>\n      \n      <h3>Customization Options</h3>\n      <p>You can customize the button appearance by modifying the CancelReady.init options in the plugin file:</p>\n      <div class=\"code-block\">\n        <pre>\nCancelReady.init({\n    vendorKey: \"' . esc_js(get_option('cancelready_vendor_key')) . '\",\n    userId: \"' . esc_js(get_current_user_id()) . '\",\n    buttonText: \"Cancel your subscription\", // Customize button text\n    buttonColor: \"#96588a\", // Customize button color\n    modalTitle: \"Cancel Your WooCommerce Subscription\", // Custom modal title\n    modalMessage: \"Are you sure you want to cancel your subscription?\", // Custom message\n    testMode: ' . (defined('WP_DEBUG') && WP_DEBUG ? 'true' : 'false') . '\n});\n        </pre>\n      </div>\n    "}];function l(){let[e,n]=(0,r.useState)("react"),t=d.find(n=>n.id===e);return(0,o.jsx)(s.Z,{title:"Tutorials - CancelReady Documentation",children:(0,o.jsxs)("div",{className:"bg-white",children:[(0,o.jsx)("div",{className:"bg-primary-600 text-white py-12",children:(0,o.jsxs)("div",{className:"container-custom",children:[(0,o.jsxs)("div",{className:"flex items-center space-x-2 text-sm text-primary-100 mb-2",children:[(0,o.jsx)(i(),{href:"/docs",className:"hover:text-white",children:"Documentation"}),(0,o.jsx)(c.Z,{className:"h-4 w-4"}),(0,o.jsx)("span",{children:"Tutorials"})]}),(0,o.jsx)("h1",{className:"text-3xl font-bold mb-4",children:"Integration Tutorials"}),(0,o.jsx)("p",{className:"text-primary-100 max-w-3xl",children:"Step-by-step guides to help you integrate CancelReady with various platforms and frameworks."})]})}),(0,o.jsx)("div",{className:"container-custom py-12",children:(0,o.jsxs)("div",{className:"flex flex-col lg:flex-row gap-8",children:[(0,o.jsx)("div",{className:"lg:w-64 flex-shrink-0",children:(0,o.jsxs)("div",{className:"sticky top-8",children:[(0,o.jsx)("h2",{className:"text-xs font-semibold text-secondary-900 uppercase tracking-wider mb-3",children:"Tutorials"}),(0,o.jsx)("nav",{className:"space-y-1 mb-8",children:d.map(t=>(0,o.jsx)("button",{onClick:()=>n(t.id),className:"flex items-center px-4 py-2 w-full text-left text-sm rounded-md ".concat(e===t.id?"bg-primary-50 text-primary-700 font-medium":"text-secondary-600 hover:bg-secondary-50"),children:t.title},t.id))}),(0,o.jsxs)("div",{className:"mt-8 p-4 bg-secondary-50 rounded-md",children:[(0,o.jsx)("h3",{className:"text-sm font-medium text-secondary-900 mb-2",children:"Need a custom integration?"}),(0,o.jsx)("p",{className:"text-sm text-secondary-600 mb-3",children:"Our team can help with custom integrations for your specific platform or tech stack."}),(0,o.jsx)(i(),{href:"/support",className:"text-sm font-medium text-primary-600 hover:text-primary-700",children:"Contact Support →"})]})]})}),(0,o.jsx)("div",{className:"flex-1",children:t&&(0,o.jsxs)("div",{children:[(0,o.jsxs)("div",{className:"flex flex-col sm:flex-row sm:items-center justify-between mb-6",children:[(0,o.jsx)("h2",{className:"text-2xl font-bold text-secondary-900",children:t.title}),(0,o.jsxs)("div",{className:"flex items-center mt-2 sm:mt-0 space-x-4",children:[(0,o.jsx)("span",{className:"inline-flex items-center px-2.5 py-0.5 rounded-md text-sm font-medium bg-secondary-100 text-secondary-800",children:t.difficulty}),(0,o.jsx)("span",{className:"text-sm text-secondary-500",children:t.timeEstimate})]})]}),(0,o.jsx)("p",{className:"text-secondary-600 text-lg mb-8",children:t.description}),(0,o.jsx)("div",{className:"prose prose-primary max-w-none",children:(0,o.jsx)("div",{dangerouslySetInnerHTML:{__html:t.content}})}),(0,o.jsxs)("div",{className:"mt-12 pt-6 border-t border-secondary-200",children:[(0,o.jsx)("h3",{className:"text-lg font-semibold text-secondary-900 mb-4",children:"Additional Resources"}),(0,o.jsxs)("div",{className:"grid grid-cols-1 md:grid-cols-2 gap-4",children:[(0,o.jsxs)(i(),{href:"/docs/api",className:"flex items-center p-4 border border-secondary-200 rounded-md hover:bg-secondary-50",children:[(0,o.jsxs)("div",{children:[(0,o.jsx)("h4",{className:"text-secondary-900 font-medium",children:"API Reference"}),(0,o.jsx)("p",{className:"text-secondary-500 text-sm",children:"Complete documentation of the CancelReady API"})]}),(0,o.jsx)(c.Z,{className:"h-5 w-5 text-secondary-400 ml-auto"})]}),(0,o.jsxs)(i(),{href:"/docs#faq",className:"flex items-center p-4 border border-secondary-200 rounded-md hover:bg-secondary-50",children:[(0,o.jsxs)("div",{children:[(0,o.jsx)("h4",{className:"text-secondary-900 font-medium",children:"FAQ"}),(0,o.jsx)("p",{className:"text-secondary-500 text-sm",children:"Answers to common questions about CancelReady"})]}),(0,o.jsx)(c.Z,{className:"h-5 w-5 text-secondary-400 ml-auto"})]})]})]})]})})]})})]})})}},4282:function(e,n,t){"use strict";var o=t(7294);let s=o.forwardRef(function(e,n){let{title:t,titleId:s,...a}=e;return o.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",fill:"currentColor","aria-hidden":"true","data-slot":"icon",ref:n,"aria-labelledby":s},a),t?o.createElement("title",{id:s},t):null,o.createElement("path",{fillRule:"evenodd",d:"M16.28 11.47a.75.75 0 0 1 0 1.06l-7.5 7.5a.75.75 0 0 1-1.06-1.06L14.69 12 7.72 5.03a.75.75 0 0 1 1.06-1.06l7.5 7.5Z",clipRule:"evenodd"}))});n.Z=s}},function(e){e.O(0,[867,191,888,774,179],function(){return e(e.s=2190)}),_N_E=e.O()}]);